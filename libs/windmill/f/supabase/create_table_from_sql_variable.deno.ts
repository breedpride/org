import * as wmill from "npm:windmill-client@1.475.1";
import { supabase } from "/f/supabase/deno_init.deno.ts";

export async function main(tableName: string) {
  const db = await supabase;
  const variablePath = `f/sql/${tableName}_sql`;

  // üß† 1. –û—Ç—Ä–∏–º—É—î–º–æ SQL –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó
  const sql = await wmill.getVariable(variablePath);
  if (!sql) throw new Error(`‚ùå –ó–º—ñ–Ω–Ω–∞ ${variablePath} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);

  console.log("üì• SQL –∑ Windmill:", sql);

  // üß™ 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–∞–±–ª–∏—Ü—è —ñ—Å–Ω—É—î
  const { data: existsCheck, error: checkErr } = await db.rpc("table_exists", {
    tablename: tableName,
  });
  if (checkErr) throw new Error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ");

  const exists = existsCheck === true;
  if (exists) {
    console.log(`üóë –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é "${tableName}" —á–µ—Ä–µ–∑ drop_table`);
    const { error: dropErr } = await db.rpc("drop_table", {
      tablename: tableName,
    });
    if (dropErr) throw new Error(`‚ùå DROP TABLE: ${dropErr.message}`);
  }

  // üß© 3. –†–æ–∑–±–∏–≤–∞—î–º–æ SQL –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
  const statements = sql
    .split(/;\s*\n/)
    .map((stmt) => stmt.trim())
    .filter((stmt) => stmt.length > 0);

  for (const stmt of statements) {
    console.log("üöÄ –í–∏–∫–æ–Ω—É—î–º–æ:", stmt);
    const { error } = await db.rpc("execute_sql", { sql: stmt });
    if (error) throw new Error(`‚ùå SQL –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
  }

  console.log(`‚úÖ –¢–∞–±–ª–∏—Ü—é "${tableName}" —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
}
